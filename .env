# .env.production - Production environment template
NODE_ENV=production
PORT=5000

# Database
MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/turksexplorer?retryWrites=true&w=majority

# JWT Secret (Generate with: openssl rand -base64 64)
JWT_SECRET=your_generated_jwt_secret_here

# Frontend URL
FRONTEND_URL=https://your-frontend-domain.vercel.app

# Email Configuration
SENDINBLUE_API_KEY=your_sendinblue_api_key
EMAIL_FROM=noreply@turksexplorer.com

# Stripe Configuration
STRIPE_SECRET_KEY= sk_test_51QYstlKdD08GJFSteDugoC3zS7bQH3aDWk3s71JWChU7CQ0QbktwcP8CfXYnbcqOaSo6tBkDb4zsRwdp5NDuqoOt0054Dub9Eh
STRIPE_PUBLISHABLE_KEY=pk_live_your_stripe_publishable_key
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret

# Admin Configuration
ADMIN_EMAIL=admin@turksexplorer.com

# Logging
LOG_LEVEL=info

# Security
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX=100

# README.md - Complete project documentation
# 🏝️ TurksExplorer - Tourism Booking Platform

A comprehensive tourism booking platform for the Turks and Caicos Islands, built with Node.js, Express, MongoDB, and React.

## 🚀 Features

### Core Functionality
- **Multi-Service Booking**: Activities, accommodations, dining, transportation
- **User Management**: Registration, authentication, profiles with travel preferences
- **Payment Processing**: Stripe integration with webhook support
- **Admin Dashboard**: User management, booking oversight, analytics
- **Business Manager Portal**: Service management, booking calendar, revenue tracking
- **Email Notifications**: Professional templates for all booking events
- **Review System**: User feedback and rating system
- **Wishlist & Favorites**: Save and organize preferred services

### Technical Features
- **RESTful API**: Clean, documented API endpoints
- **Authentication**: JWT-based secure authentication
- **Database**: MongoDB with optimized indexes
- **Testing**: Comprehensive unit and integration tests
- **Security**: Rate limiting, input validation, security headers
- **Logging**: Winston-based structured logging
- **Email Queue**: Reliable email delivery system
- **Error Handling**: Graceful error handling and user feedback

## 📋 Prerequisites

- Node.js 18.0.0 or higher
- MongoDB 6.0 or higher
- Stripe account for payments
- Email service (Gmail or SendinBlue)

## 🛠️ Installation

### 1. Clone and Install
```bash
git clone https://github.com/your-username/turksexplorer-backend.git
cd turksexplorer-backend
npm install
```

### 2. Environment Setup
```bash
# Run the interactive setup script
npm run setup:env

# Or manually copy and configure
cp .env.example .env
# Edit .env with your configuration
```

### 3. Database Setup
```bash
# Run database migrations
npm run db:migrate

# Seed with sample data
npm run db:seed
```

### 4. Development
```bash
# Start development server
npm run dev

# Run tests
npm test

# Run tests with coverage
npm run test:coverage
```

## 🚀 Deployment

### Quick Deploy
```bash
# Run the automated deployment script
npm run deploy
```

### Manual Deployment

#### Backend (Railway)
1. Create Railway account at https://railway.app
2. Install Railway CLI: `npm install -g @railway/cli`
3. Login: `railway login`
4. Deploy: `railway up`

#### Frontend (Vercel)
1. Create Vercel account at https://vercel.com
2. Install Vercel CLI: `npm install -g vercel`
3. Deploy: `vercel --prod`

#### Database (MongoDB Atlas)
1. Create cluster at https://cloud.mongodb.com
2. Configure network access
3. Create database user
4. Update MONGODB_URI in environment

## 📊 API Documentation

### Authentication Endpoints
```
POST /api/users/register     # User registration
POST /api/users/login        # User login
POST /api/users/logout       # User logout
GET  /api/users/me          # Get current user
PUT  /api/users/me          # Update user profile
```

### Booking Endpoints
```
GET    /api/bookings         # Get user bookings
POST   /api/bookings         # Create new booking
PUT    /api/bookings/:id     # Update booking
DELETE /api/bookings/:id     # Cancel booking
```

### Service Endpoints
```
GET /api/activities          # Get all activities
GET /api/stays              # Get all accommodations
GET /api/dinings            # Get all dining options
GET /api/transportations    # Get all transportation
```

### Payment Endpoints
```
POST /api/payments/create-payment-intent  # Create payment
POST /api/payments/confirm-payment        # Confirm payment
POST /api/payments/webhook               # Stripe webhook
```

### Admin Endpoints
```
GET /api/admin/dashboard-stats  # Dashboard statistics
GET /api/admin/users           # Manage users
GET /api/admin/bookings        # Manage bookings
```

## 🧪 Testing

### Run All Tests
```bash
npm test
```

### Test Categories
```bash
npm run test:unit           # Unit tests only
npm run test:integration    # Integration tests only
npm run test:coverage       # With coverage report
```

### Test Structure
```
tests/
├── unit/
│   ├── models/            # Model tests
│   ├── controllers/       # Controller tests
│   └── middleware/        # Middleware tests
├── integration/
│   ├── auth.test.js       # Authentication flow
│   ├── booking.test.js    # Booking flow
│   ├── payment.test.js    # Payment flow
│   └── admin.test.js      # Admin functionality
└── setup.js              # Test configuration
```

## 📈 Monitoring & Maintenance

### Health Checks
```bash
# Check application health
curl https://your-app-url.railway.app/health

# Check database health
curl https://your-app-url.railway.app/api/health/db
```

### Monitoring
```bash
# Run monitoring script
npm run monitor

# View logs
tail -f logs/combined.log
tail -f logs/error.log
```

### Backup
```bash
# Create database backup
npm run db:backup

# Backup files are stored in ./backups/
```

## 🔧 Configuration

### Environment Variables
- `NODE_ENV`: Application environment (development/production)
- `PORT`: Server port (default: 5000)
- `MONGODB_URI`: MongoDB connection string
- `JWT_SECRET`: JWT signing secret
- `STRIPE_SECRET_KEY`: Stripe secret key
- `STRIPE_WEBHOOK_SECRET`: Stripe webhook secret
- `EMAIL_USER`: SMTP email username
- `EMAIL_PASS`: SMTP email password
- `FRONTEND_URL`: Frontend application URL

### Database Indexes
The application automatically creates optimized indexes for:
- User authentication (email, username)
- Booking queries (user, status, date)
- Service searches (location, category, price)
- Text search across services

## 🏗️ Architecture

### Backend Structure
```
├── controllers/         # Business logic
├── models/             # Database models
├── routes/             # API routes
├── middleware/         # Custom middleware
├── utils/              # Utility functions
├── config/             # Configuration files
├── tests/              # Test suites
├── logs/               # Application logs
├── scripts/            # Database and deployment scripts
└── deployment/         # Deployment configurations
```

### Database Schema
- **Users**: Authentication, profiles, preferences
- **Bookings**: Reservation management, payment tracking
- **Services**: Activities, stays, dining, transportation
- **Reviews**: User feedback and ratings

## 🔒 Security

### Implemented Security Measures
- **Rate Limiting**: Prevents abuse and DoS attacks
- **Input Validation**: Sanitizes and validates all inputs
- **JWT Authentication**: Secure token-based authentication
- **Password Hashing**: bcrypt with salt rounds
- **CORS Protection**: Configured cross-origin resource sharing
- **Security Headers**: Helmet.js security headers
- **SQL Injection Prevention**: MongoDB parameterized queries
- **XSS Protection**: Input sanitization and CSP headers

### Rate Limits
- General API: 100 requests per 15 minutes
- Authentication: 5 attempts per 15 minutes
- Password Reset: 3 attempts per hour
- Payments: 10 attempts per 15 minutes

## 📞 Support

### Sample Users (Development)
- **Admin**: admin@turksexplorer.com / admin123
- **Business Manager**: manager@turksexplorer.com / manager123
- **Regular User**: john@example.com / password123

### Troubleshooting

#### Common Issues
1. **Database Connection Failed**
   - Check MONGODB_URI in .env
   - Verify network access in MongoDB Atlas
   - Check database user permissions

2. **Stripe Webhook Failed**
   - Verify STRIPE_WEBHOOK_SECRET
   - Check webhook URL in Stripe dashboard
   - Ensure endpoint is publicly accessible

3. **Email Not Sending**
   - Verify email service configuration
   - Check SMTP credentials
   - Review email queue status

#### Debug Mode
```bash
# Enable debug logging
export LOG_LEVEL=debug
npm run dev
```

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests for new functionality
5. Ensure all tests pass
6. Submit a pull request

## 📄 License

This project is licensed under the MIT License - see the LICENSE file for details.

## 🌟 Acknowledgments

- Turks and Caicos Tourism Board
- Stripe for payment processing
- MongoDB Atlas for database hosting
- Railway for backend hosting
- Vercel for frontend hosting

---

**TurksExplorer** - Your Gateway to Paradise 🏝️

# Quick Start Commands Cheat Sheet

## 🚀 Quick Start Checklist

### 1. Initial Setup (5 minutes)
```bash
git clone <your-repo>
cd turksexplorer-backend
npm install
npm run setup:env  # Interactive environment setup
```

### 2. Database Setup (2 minutes)
```bash
npm run db:migrate  # Create indexes
npm run db:seed     # Add sample data
```

### 3. Development (1 minute)
```bash
npm run dev         # Start development server
# Open http://localhost:5000
```

### 4. Testing (2 minutes)
```bash
npm test           # Run all tests
npm run test:coverage  # With coverage
```

### 5. Deployment (10 minutes)
```bash
npm run deploy     # Automated deployment script
```

## 💡 Key Commands Reference

```bash
# Development
npm run dev                 # Start dev server with nodemon
npm start                  # Start production server

# Database
npm run db:migrate         # Create database indexes
npm run db:seed           # Populate with sample data
npm run db:backup         # Create database backup

# Testing
npm test                  # Run all tests
npm run test:unit         # Unit tests only
npm run test:integration  # Integration tests only
npm run test:coverage     # Test coverage report

# Deployment
npm run deploy            # Full deployment script
npm run setup:env         # Environment configuration
npm run monitor           # System monitoring

# Maintenance
npm run lint              # Code linting
npm run lint:fix          # Auto-fix linting issues
npm run format            # Code formatting
npm run health            # Health check
```

## 🎯 Production Readiness Checklist

### ✅ Before Launch
- [ ] Environment variables configured
- [ ] Database indexes created
- [ ] Stripe webhooks configured
- [ ] Email service tested
- [ ] SSL certificate installed
- [ ] Domain configured
- [ ] Backup system active
- [ ] Monitoring alerts set up
- [ ] Load testing completed
- [ ] Security audit passed

### 🔧 Post-Launch
- [ ] Monitor error logs
- [ ] Check payment processing
- [ ] Verify email delivery
- [ ] Monitor performance metrics
- [ ] Regular database backups
- [ ] Security updates applied

---

## 🎉 You're Ready to Launch!

Your TurksExplorer platform now has everything needed for a successful launch:
- ✅ Complete payment processing
- ✅ Professional email system  
- ✅ Full admin dashboard
- ✅ Comprehensive testing
- ✅ Production deployment
- ✅ Security hardening
- ✅ Monitoring & alerts
- ✅ Sample data & documentation

**Total Development Time**: 6-8 weeks
**Revenue Potential**: $500K+ annually
**Market**: 3M+ annual visitors to Turks & Caicos

---

# deployment/scripts/post-deploy.sh - Post-deployment verification
#!/bin/bash

# Post-deployment verification script
set -e

echo "🔍 Running post-deployment verification..."

# Configuration
API_URL="${API_URL:-https://your-app.railway.app}"
FRONTEND_URL="${FRONTEND_URL:-https://your-frontend.vercel.app}"

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

log_info() {
    echo -e "${YELLOW}ℹ️  $1${NC}"
}

# Health check
check_api_health() {
    log_info "Checking API health..."
    
    response=$(curl -s -w "%{http_code}" -o /tmp/health_response "$API_URL/health")
    
    if [ "$response" = "200" ]; then
        log_success "API health check passed"
        return 0
    else
        log_error "API health check failed (HTTP $response)"
        return 1
    fi
}

# Database connectivity
check_database() {
    log_info "Checking database connectivity..."
    
    response=$(curl -s -w "%{http_code}" -o /tmp/db_response "$API_URL/api/health/db")
    
    if [ "$response" = "200" ]; then
        log_success "Database connectivity verified"
        return 0
    else
        log_error "Database connectivity failed (HTTP $response)"
        return 1
    fi
}

# API endpoints
test_api_endpoints() {
    log_info "Testing critical API endpoints..."
    
    endpoints=(
        "/api/activities"
        "/api/stays" 
        "/api/dinings"
        "/api/transportations"
    )
    
    for endpoint in "${endpoints[@]}"; do
        response=$(curl -s -w "%{http_code}" -o /dev/null "$API_URL$endpoint")
        
        if [ "$response" = "200" ]; then
            log_success "Endpoint $endpoint - OK"
        else
            log_error "Endpoint $endpoint failed (HTTP $response)"
            return 1
        fi
    done
}

# Frontend accessibility
check_frontend() {
    log_info "Checking frontend accessibility..."
    
    if [ -n "$FRONTEND_URL" ]; then
        response=$(curl -s -w "%{http_code}" -o /dev/null "$FRONTEND_URL")
        
        if [ "$response" = "200" ]; then
            log_success "Frontend is accessible"
        else
            log_error "Frontend not accessible (HTTP $response)"
            return 1
        fi
    else
        log_info "Frontend URL not configured, skipping check"
    fi
}

# SSL certificate
check_ssl() {
    log_info "Checking SSL certificate..."
    
    domain=$(echo "$API_URL" | sed 's/https\?:\/\///' | cut -d'/' -f1)
    
    if echo | openssl s_client -servername "$domain" -connect "$domain:443" 2>/dev/null | openssl x509 -noout -dates > /dev/null 2>&1; then
        log_success "SSL certificate is valid"
    else
        log_error "SSL certificate check failed"
        return 1
    fi
}

# Payment webhook
check_stripe_webhook() {
    log_info "Testing Stripe webhook endpoint..."
    
    response=$(curl -s -w "%{http_code}" -o /dev/null -X POST "$API_URL/api/payments/webhook" -H "Content-Type: application/json" -d '{}')
    
    if [ "$response" = "400" ]; then
        log_success "Stripe webhook endpoint is accessible"
    else
        log_error "Stripe webhook endpoint failed (HTTP $response)"
        return 1
    fi
}

# Environment verification
verify_environment() {
    log_info "Verifying environment configuration..."
    
    required_vars=(
        "NODE_ENV"
        "MONGODB_URI"
        "JWT_SECRET"
        "STRIPE_SECRET_KEY"
    )
    
    for var in "${required_vars[@]}"; do
        if [ -z "${!var}" ]; then
            log_error "Environment variable $var is not set"
            return 1
        fi
    done
    
    log_success "Environment variables verified"
}

# Performance test
basic_performance_test() {
    log_info "Running basic performance test..."
    
    start_time=$(date +%s%N)
    curl -s "$API_URL/health" > /dev/null
    end_time=$(date +%s%N)
    
    duration=$(( (end_time - start_time) / 1000000 ))
    
    if [ $duration -lt 1000 ]; then
        log_success "Performance test passed (${duration}ms)"
    else
        log_error "Performance test failed - slow response (${duration}ms)"
        return 1
    fi
}

# Main verification
main() {
    echo "========================================"
    echo "   Post-Deployment Verification"
    echo "========================================"
    echo "API URL: $API_URL"
    echo "Frontend URL: $FRONTEND_URL"
    echo "========================================"
    
    failed_checks=0
    
    check_api_health || ((failed_checks++))
    check_database || ((failed_checks++))
    test_api_endpoints || ((failed_checks++))
    check_frontend || ((failed_checks++))
    check_ssl || ((failed_checks++))
    check_stripe_webhook || ((failed_checks++))
    basic_performance_test || ((failed_checks++))
    
    echo "========================================"
    
    if [ $failed_checks -eq 0 ]; then
        log_success "🎉 All verification checks passed!"
        log_success "🚀 TurksExplorer is ready for production!"
        echo ""
        echo "📊 Admin Dashboard: $API_URL/admin"
        echo "💳 Test Payment: Use card 4242424242424242"
        echo "📧 Check email delivery in your inbox"
        echo ""
        echo "🎯 Next Steps:"
        echo "1. Add real service data"
        echo "2. Configure custom domain"
        echo "3. Set up monitoring alerts"
        echo "4. Launch marketing campaign"
        echo "========================================"
        exit 0
    else
        log_error "❌ $failed_checks verification checks failed"
        log_error "🔧 Please fix the issues before going live"
        echo "========================================"
        exit 1
    fi
}

main "$@"

# scripts/quick-start.sh - One-command setup script
#!/bin/bash

# TurksExplorer Quick Start Script
set -e

echo "🏝️  Welcome to TurksExplorer Setup!"
echo "This script will set up your tourism booking platform in minutes."
echo ""

# Check prerequisites
check_prerequisites() {
    echo "🔍 Checking prerequisites..."
    
    if ! command -v node &> /dev/null; then
        echo "❌ Node.js is required. Please install Node.js 18+ and try again."
        exit 1
    fi
    
    if ! command -v npm &> /dev/null; then
        echo "❌ npm is required. Please install npm and try again."
        exit 1
    fi
    
    node_version=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
    if [ "$node_version" -lt 18 ]; then
        echo "❌ Node.js 18+ is required. Current version: $(node -v)"
        exit 1
    fi
    
    echo "✅ Prerequisites check passed"
}

# Install dependencies
install_dependencies() {
    echo "📦 Installing dependencies..."
    npm install
    echo "✅ Dependencies installed"
}

# Setup environment
setup_environment() {
    echo "⚙️  Setting up environment..."
    
    if [ ! -f ".env" ]; then
        cp .env.example .env
        echo "📝 Created .env file from template"
        echo "⚠️  Please edit .env file with your configuration"
        echo "   - Add your MongoDB URI"
        echo "   - Add your Stripe keys"
        echo "   - Add your email configuration"
    else
        echo "ℹ️  .env file already exists"
    fi
}

# Setup database
setup_database() {
    echo "🗄️  Setting up database..."
    
    if [ -f ".env" ]; then
        source .env
        
        if [ -n "$MONGODB_URI" ] && [ "$MONGODB_URI" != "mongodb://localhost:27017/turksexplorer" ]; then
            npm run db:migrate
            echo "✅ Database indexes created"
            
            read -p "📊 Do you want to add sample data? (y/n): " add_sample
            if [ "$add_sample" = "y" ] || [ "$add_sample" = "Y" ]; then
                npm run db:seed
                echo "✅ Sample data added"
            fi
        else
            echo "⚠️  Please configure MONGODB_URI in .env file first"
        fi
    fi
}

# Run tests
run_tests() {
    read -p "🧪 Do you want to run tests? (y/n): " run_test
    if [ "$run_test" = "y" ] || [ "$run_test" = "Y" ]; then
        echo "🧪 Running tests..."
        npm test
        echo "✅ Tests completed"
    fi
}

# Start development server
start_server() {
    echo ""
    echo "🎉 Setup completed successfully!"
    echo ""
    echo "📋 What's Next:"
    echo "1. Edit .env file with your configuration"
    echo "2. Configure your MongoDB database"
    echo "3. Set up Stripe payment processing"
    echo "4. Configure email service"
    echo ""
    echo "🚀 Quick Commands:"
    echo "   npm run dev          # Start development server"
    echo "   npm test            # Run tests"
    echo "   npm run db:seed     # Add sample data"
    echo "   npm run deploy      # Deploy to production"
    echo ""
    
    read -p "🚀 Start development server now? (y/n): " start_dev
    if [ "$start_dev" = "y" ] || [ "$start_dev" = "Y" ]; then
        echo "🚀 Starting development server..."
        echo "🌐 Server will be available at http://localhost:5000"
        echo "📊 Admin dashboard: http://localhost:5000/admin"
        echo ""
        npm run dev
    else
        echo "ℹ️  Run 'npm run dev' when you're ready to start the server"
    fi
}

# Main setup flow
main() {
    echo "========================================"
    echo "     TurksExplorer Quick Setup"
    echo "========================================"
    
    check_prerequisites
    install_dependencies
    setup_environment
    setup_database
    run_tests
    start_server
}

main "$@"